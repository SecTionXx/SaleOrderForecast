// pdfExport.js - Handles PDF export functionality

/**
 * Generates a PDF report from the current filtered data
 * @param {Array} data - The data to include in the report
 * @param {String} filename - The filename to use for the export
 * @param {Object} options - Additional options for PDF generation
 * @returns {Boolean} - True if export was successful
 */
function exportToPDF(data, filename = 'order_forecast_report.pdf', options = {}) {
  if (!data || !data.length) {
    console.error('No data to export to PDF');
    return false;
  }

  try {
    // Check if jsPDF is available
    if (typeof jsPDF === 'undefined') {
      console.error('jsPDF library not found. Please include it in your project.');
      alert('PDF export requires the jsPDF library which is not currently loaded.');
      return false;
    }

    // Initialize jsPDF
    const doc = new jsPDF({
      orientation: options.orientation || 'landscape',
      unit: 'mm',
      format: options.format || 'a4'
    });

    // Set document properties
    doc.setProperties({
      title: 'Order Forecast Report',
      subject: 'Sales Order Forecast Data',
      author: 'Order Forecast Dashboard',
      keywords: 'orders, forecast, sales, report',
      creator: 'Order Forecast Dashboard'
    });

    // Add report title
    doc.setFontSize(18);
    doc.setTextColor(40, 40, 40);
    doc.text('Order Forecast Report', 14, 22);

    // Add report date
    const currentDate = new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    doc.setFontSize(11);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on ${currentDate}`, 14, 30);

    // Add filter information if provided
    if (options.filters) {
      doc.setFontSize(10);
      doc.text(`Filters: ${options.filters}`, 14, 36);
    }

    // Add summary information
    if (options.summary) {
      doc.setFontSize(12);
      doc.setTextColor(40, 40, 40);
      doc.text('Summary', 14, 45);
      
      let yPos = 52;
      Object.entries(options.summary).forEach(([key, value]) => {
        doc.setFontSize(10);
        doc.text(`${key}: ${value}`, 14, yPos);
        yPos += 6;
      });
      
      // Add some space after summary
      yPos += 5;
    } else {
      // If no summary, start table at this position
      var yPos = 45;
    }

    // Prepare table data
    const headers = Object.keys(data[0]).filter(header => 
      // Exclude certain fields if needed
      !['notes', 'id', 'dealId', 'createdBy'].includes(header)
    );

    // Format headers for display (capitalize, replace camelCase with spaces)
    const formattedHeaders = headers.map(header => 
      header.replace(/([A-Z])/g, ' $1')
           .replace(/^./, str => str.toUpperCase())
    );

    // Prepare table rows
    const rows = data.map(item => 
      headers.map(header => {
        let value = item[header];
        
        // Format dates
        if (value instanceof Date) {
          return value.toLocaleDateString();
        }
        
        // Format currency values
        if (header.toLowerCase().includes('value') || header.toLowerCase().includes('amount')) {
          return typeof value === 'number' 
            ? new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(value)
            : value;
        }
        
        // Format percentage values
        if (header.toLowerCase().includes('percent') || header.toLowerCase().includes('probability')) {
          return typeof value === 'number' ? `${value}%` : value;
        }
        
        return value !== null && value !== undefined ? value.toString() : '';
      })
    );

    // Calculate column widths based on content
    const columnWidths = calculateColumnWidths(formattedHeaders, rows, doc);
    
    // Add table to PDF
    doc.autoTable({
      head: [formattedHeaders],
      body: rows,
      startY: yPos,
      theme: 'grid',
      headStyles: {
        fillColor: [67, 97, 238],
        textColor: 255,
        fontStyle: 'bold'
      },
      columnStyles: headers.reduce((styles, header, index) => {
        styles[index] = { cellWidth: columnWidths[index] };
        return styles;
      }, {}),
      didDrawPage: function(data) {
        // Add page number at the bottom
        const pageNumber = doc.internal.getNumberOfPages();
        doc.setFontSize(10);
        doc.text(`Page ${pageNumber}`, doc.internal.pageSize.width - 20, doc.internal.pageSize.height - 10);
      }
    });

    // Add footer with timestamp
    const timestamp = new Date().toISOString();
    const pageCount = doc.internal.getNumberOfPages();
    
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150, 150, 150);
      doc.text(`Report generated by Order Forecast Dashboard | ${timestamp}`, 14, doc.internal.pageSize.height - 10);
    }

    // Save the PDF
    doc.save(filename);
    console.log(`PDF report exported to ${filename}`);
    return true;
  } catch (error) {
    console.error('Error generating PDF report:', error);
    alert('An error occurred while generating the PDF report. Please try again.');
    return false;
  }
}

/**
 * Calculate optimal column widths based on content
 * @param {Array} headers - Table headers
 * @param {Array} rows - Table data rows
 * @param {Object} doc - jsPDF document instance
 * @returns {Array} - Array of column widths
 */
function calculateColumnWidths(headers, rows, doc) {
  const pageWidth = doc.internal.pageSize.width - 28; // 14mm margins on each side
  const columnCount = headers.length;
  
  // Get text widths for headers and all cell values
  const headerWidths = headers.map(header => 
    doc.getStringUnitWidth(header) * 10 / doc.internal.scaleFactor
  );
  
  const contentWidths = headers.map((_, colIndex) => {
    const maxWidth = Math.max(...rows.map(row => {
      const cellContent = row[colIndex] || '';
      return doc.getStringUnitWidth(cellContent) * 10 / doc.internal.scaleFactor;
    }));
    return maxWidth;
  });
  
  // Get maximum width needed for each column (header or content)
  const maxWidths = headerWidths.map((headerWidth, index) => 
    Math.max(headerWidth, contentWidths[index])
  );
  
  // Add some padding
  const paddedWidths = maxWidths.map(width => width + 5);
  
  // Calculate total width needed
  const totalWidth = paddedWidths.reduce((sum, width) => sum + width, 0);
  
  // If total width is less than page width, adjust proportionally
  if (totalWidth < pageWidth) {
    const ratio = pageWidth / totalWidth;
    return paddedWidths.map(width => width * ratio);
  }
  
  // If total width exceeds page width, scale down proportionally
  const ratio = pageWidth / totalWidth;
  return paddedWidths.map(width => width * ratio);
}

/**
 * Create a PDF with charts and data
 * @param {Array} data - The data to include in the report
 * @param {Object} charts - The Chart.js instances to include
 * @param {String} filename - The filename to use for the export
 * @param {Object} options - Additional options for PDF generation
 * @returns {Boolean} - True if export was successful
 */
function exportToPDFWithCharts(data, charts, filename = 'order_forecast_report.pdf', options = {}) {
  if (!data || !data.length) {
    console.error('No data to export to PDF');
    return false;
  }

  try {
    // Check if jsPDF is available
    if (typeof jsPDF === 'undefined') {
      console.error('jsPDF library not found. Please include it in your project.');
      alert('PDF export requires the jsPDF library which is not currently loaded.');
      return false;
    }

    // Initialize jsPDF
    const doc = new jsPDF({
      orientation: options.orientation || 'portrait',
      unit: 'mm',
      format: options.format || 'a4'
    });

    // Set document properties
    doc.setProperties({
      title: 'Order Forecast Report with Charts',
      subject: 'Sales Order Forecast Data and Visualizations',
      author: 'Order Forecast Dashboard',
      keywords: 'orders, forecast, sales, report, charts',
      creator: 'Order Forecast Dashboard'
    });

    // Add report title
    doc.setFontSize(18);
    doc.setTextColor(40, 40, 40);
    doc.text('Order Forecast Report', 14, 22);

    // Add report date
    const currentDate = new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    doc.setFontSize(11);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on ${currentDate}`, 14, 30);

    // Add filter information if provided
    if (options.filters) {
      doc.setFontSize(10);
      doc.text(`Filters: ${options.filters}`, 14, 36);
    }

    // Add summary information
    let yPos = 45;
    if (options.summary) {
      doc.setFontSize(12);
      doc.setTextColor(40, 40, 40);
      doc.text('Summary', 14, yPos);
      
      yPos += 7;
      Object.entries(options.summary).forEach(([key, value]) => {
        doc.setFontSize(10);
        doc.text(`${key}: ${value}`, 14, yPos);
        yPos += 6;
      });
      
      // Add some space after summary
      yPos += 10;
    }

    // Add charts
    if (charts && Object.keys(charts).length > 0) {
      doc.setFontSize(12);
      doc.setTextColor(40, 40, 40);
      doc.text('Charts', 14, yPos);
      yPos += 10;

      // Convert Chart.js instances to images and add to PDF
      let chartIndex = 0;
      const chartWidth = doc.internal.pageSize.width - 28; // 14mm margins on each side
      const chartHeight = 70; // Height in mm
      
      for (const [chartName, chart] of Object.entries(charts)) {
        if (!chart) continue;
        
        try {
          // Convert chart to image
          const canvas = chart.canvas;
          const chartImage = canvas.toDataURL('image/png', 1.0);
          
          // Check if we need a new page
          if (yPos + chartHeight > doc.internal.pageSize.height - 20) {
            doc.addPage();
            yPos = 20;
          }
          
          // Add chart title
          doc.setFontSize(11);
          doc.setTextColor(60, 60, 60);
          doc.text(formatChartName(chartName), 14, yPos);
          yPos += 6;
          
          // Add chart image
          doc.addImage(chartImage, 'PNG', 14, yPos, chartWidth, chartHeight);
          yPos += chartHeight + 15;
          
          chartIndex++;
        } catch (chartError) {
          console.error(`Error adding chart ${chartName} to PDF:`, chartError);
        }
      }
    }

    // Add data table on a new page
    doc.addPage();
    
    // Table title
    doc.setFontSize(14);
    doc.setTextColor(40, 40, 40);
    doc.text('Detailed Data', 14, 22);
    
    // Prepare table data
    const headers = Object.keys(data[0]).filter(header => 
      // Exclude certain fields if needed
      !['notes', 'id', 'dealId', 'createdBy'].includes(header)
    );

    // Format headers for display
    const formattedHeaders = headers.map(header => 
      header.replace(/([A-Z])/g, ' $1')
           .replace(/^./, str => str.toUpperCase())
    );

    // Prepare table rows
    const rows = data.map(item => 
      headers.map(header => {
        let value = item[header];
        
        // Format dates
        if (value instanceof Date) {
          return value.toLocaleDateString();
        }
        
        // Format currency values
        if (header.toLowerCase().includes('value') || header.toLowerCase().includes('amount')) {
          return typeof value === 'number' 
            ? new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(value)
            : value;
        }
        
        // Format percentage values
        if (header.toLowerCase().includes('percent') || header.toLowerCase().includes('probability')) {
          return typeof value === 'number' ? `${value}%` : value;
        }
        
        return value !== null && value !== undefined ? value.toString() : '';
      })
    );

    // Add table to PDF
    doc.autoTable({
      head: [formattedHeaders],
      body: rows,
      startY: 30,
      theme: 'grid',
      headStyles: {
        fillColor: [67, 97, 238],
        textColor: 255,
        fontStyle: 'bold'
      },
      didDrawPage: function(data) {
        // Add page number at the bottom
        const pageNumber = doc.internal.getNumberOfPages();
        doc.setFontSize(10);
        doc.text(`Page ${pageNumber}`, doc.internal.pageSize.width - 20, doc.internal.pageSize.height - 10);
      }
    });

    // Add footer with timestamp
    const timestamp = new Date().toISOString();
    const pageCount = doc.internal.getNumberOfPages();
    
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150, 150, 150);
      doc.text(`Report generated by Order Forecast Dashboard | ${timestamp}`, 14, doc.internal.pageSize.height - 10);
    }

    // Save the PDF
    doc.save(filename);
    console.log(`PDF report with charts exported to ${filename}`);
    return true;
  } catch (error) {
    console.error('Error generating PDF report with charts:', error);
    alert('An error occurred while generating the PDF report. Please try again.');
    return false;
  }
}

/**
 * Format chart name for display
 * @param {String} chartName - The chart name to format
 * @returns {String} - Formatted chart name
 */
function formatChartName(chartName) {
  // Convert camelCase to Title Case with Spaces
  return chartName
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, str => str.toUpperCase())
    .replace(/Chart$/, '') // Remove "Chart" suffix if present
    .trim();
}

export { exportToPDF, exportToPDFWithCharts };
